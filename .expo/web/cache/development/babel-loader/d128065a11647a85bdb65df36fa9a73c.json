{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/elwx/Documents/GitHub/SmileTrade/screens/Login.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from 'react';\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\nimport Screen from \"../Components/Screen\";\nimport AppFormField from \"../Components/AppFormField\";\nimport SubmitButton from \"../Components/SubmitButton\";\nimport AppButton from \"../Components/AppButton\";\nimport { loginWithEmail } from \"../firebase/firebase\";\nimport ErrorMessage from \"../Components/ErrorMessage\";\nvar validationSchema = Yup.object().shape({\n  email: Yup.string().required().email().label(\"Email\"),\n  password: Yup.string().required().min(6).label(\"Password\")\n});\n\nfunction Login(_ref) {\n  var _this = this;\n\n  var navigation = _ref.navigation;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      loginError = _useState2[0],\n      setLoginError = _useState2[1];\n\n  function handleOnLogin(values) {\n    var email, password;\n    return _regeneratorRuntime.async(function handleOnLogin$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            email = values.email, password = values.password;\n            _context.prev = 1;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(loginWithEmail(values));\n\n          case 4:\n            console.log(email);\n            _context.next = 10;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](1);\n            setLoginError(_context.t0.message);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 7]], Promise);\n  }\n\n  return React.createElement(ImageBackground, {\n    style: styles.background,\n    source: require(\"../assets/Beachbackground.png\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, React.createElement(Screen, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, React.createElement(Image, {\n    style: styles.logo,\n    source: require(\"../assets/smileTrade.png\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }), React.createElement(Formik, {\n    initialValues: {\n      email: '',\n      password: ''\n    },\n    validationSchema: validationSchema,\n    onSubmit: function onSubmit(values) {\n      return handleOnLogin(values);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }, function () {\n    return React.createElement(React.Fragment, null, React.createElement(AppFormField, {\n      autoCapitalize: \"none\",\n      autoCorrect: false,\n      icon: \"email\",\n      keyboardType: \"email-address\",\n      name: \"email\",\n      placeholder: \"Email\",\n      textContentType: \"emailAddress\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 29\n      }\n    }), React.createElement(AppFormField, {\n      autoCapitalize: \"none\",\n      autoCorrect: false,\n      icon: \"lock\",\n      name: \"password\",\n      placeholder: \"Password\",\n      secureTextEntry: true,\n      textContentType: \"password\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 29\n      }\n    }), React.createElement(ErrorMessage, {\n      error: loginError,\n      visible: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 29\n      }\n    }), React.createElement(SubmitButton, {\n      title: \"Login\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 29\n      }\n    }), React.createElement(AppButton, {\n      title: \"Go back to the Welcome Screen\",\n      onPress: function onPress() {\n        return navigation.navigate('Welcome');\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 29\n      }\n    }));\n  })));\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    padding: 50\n  },\n  logo: {\n    width: '100%',\n    height: 200,\n    alignSelf: 'center',\n    marginBottom: 300\n  },\n  background: {\n    flex: 1,\n    justifyContent: \"flex-end\"\n  }\n});\nexport default Login;","map":{"version":3,"sources":["/Users/elwx/Documents/GitHub/SmileTrade/screens/Login.js"],"names":["React","useState","Yup","Formik","Screen","AppFormField","SubmitButton","AppButton","loginWithEmail","ErrorMessage","validationSchema","object","shape","email","string","required","label","password","min","Login","navigation","loginError","setLoginError","handleOnLogin","values","console","log","message","styles","background","require","container","logo","navigate","StyleSheet","create","padding","width","height","alignSelf","marginBottom","flex","justifyContent"],"mappings":"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","sourcesContent":["import React,{ useState} from 'react';\r\nimport { ImageBackground, StyleSheet, Image } from  'react-native';\r\nimport * as Yup from 'yup';\r\nimport { Formik } from 'formik';\r\n\r\nimport Screen from '../Components/Screen';\r\nimport AppFormField from '../Components/AppFormField';\r\nimport SubmitButton from '../Components/SubmitButton';\r\nimport AppButton from '../Components/AppButton';\r\nimport {loginWithEmail} from '../firebase/firebase';\r\nimport ErrorMessage from '../Components/ErrorMessage';\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    email: Yup.string().required().email().label(\"Email\"),\r\n    password: Yup.string().required().min(6).label(\"Password\"),\r\n})\r\n\r\n\r\n\r\n\r\nfunction Login({navigation}) {\r\n\r\n    const [loginError, setLoginError] = useState('');\r\n    \r\n    \r\n        async function handleOnLogin(values) {\r\n            const { email, password } = values;\r\n        \r\n            try {\r\n            await loginWithEmail(values);\r\n            console.log(email)\r\n            \r\n            } catch (error) {\r\n            setLoginError(error.message);\r\n            }\r\n        }\r\n\r\n    return (\r\n        <ImageBackground \r\n        style = {styles.background}\r\n        source= {require('../assets/Beachbackground.png')}>\r\n        <Screen style={styles.container}>\r\n        <Image style = {styles.logo} source={require('../assets/smileTrade.png')}/>\r\n            <Formik\r\n                initialValues = {{ email: '', password: '' }}\r\n                // onSubmit={values => console.log(values)}\r\n             \r\n                validationSchema = {validationSchema}\r\n                onSubmit={values => handleOnLogin(values)}\r\n                >\r\n                    { () => (\r\n                        <>\r\n                            <AppFormField\r\n                                autoCapitalize = \"none\"\r\n                                autoCorrect = {false}\r\n                                icon = \"email\"\r\n                                keyboardType = \"email-address\"\r\n                                name = 'email'\r\n                                placeholder = \"Email\"\r\n                                textContentType = \"emailAddress\"\r\n                            />\r\n                            <AppFormField\r\n                                autoCapitalize = \"none\"\r\n                                autoCorrect = {false}\r\n                                icon = \"lock\"\r\n                                name = 'password'\r\n                                placeholder = \"Password\"\r\n                                secureTextEntry\r\n                                textContentType = \"password\"\r\n                            />\r\n                            <ErrorMessage error={loginError} visible={true} />\r\n                            <SubmitButton title=\"Login\" />\r\n                            <AppButton title=\"Go back to the Welcome Screen\"  onPress={() => navigation.navigate('Welcome')}/>\r\n                            \r\n\r\n                        </>\r\n                    )}\r\n            </Formik>\r\n        </Screen>\r\n        </ImageBackground>\r\n    );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        padding: 50\r\n    },\r\n     logo:{\r\n         width: '100%',\r\n         height: 200,\r\n         alignSelf: 'center',\r\n         marginBottom: 300\r\n     },\r\n     background: {\r\n        flex: 1,\r\n        justifyContent: \"flex-end\",\r\n\r\n    },\r\n})\r\n\r\nexport default Login;"]},"metadata":{},"sourceType":"module"}