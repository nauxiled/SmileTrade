{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/elwx/Documents/GitHub/SmileTrade/Components/FormImagePicker.js\";\nimport React from \"react\";\nimport { useFormikContext } from \"formik\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport ImageInputList from \"./ImageInputList\";\n\nfunction FormImagePicker(_ref) {\n  var name = _ref.name;\n\n  var _useFormikContext = useFormikContext(),\n      errors = _useFormikContext.errors,\n      setFieldValue = _useFormikContext.setFieldValue,\n      touched = _useFormikContext.touched,\n      values = _useFormikContext.values;\n\n  var imageUris = values[name];\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      uploading = _useState2[0],\n      setUploading = _useState2[1];\n\n  var handleAdd = function handleAdd(uri) {\n    setFieldValue(name, [].concat(_toConsumableArray(imageUris), [uri]));\n  };\n\n  var handleRemove = function handleRemove(uri) {\n    setFieldValue(name, imageUris.filter(function (imageUri) {\n      return imageUri !== uri;\n    }));\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(ImageInputList, {\n    imageUris: imageUris,\n    onAddImage: handleAdd,\n    onRemoveImage: handleRemove,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }), React.createElement(ErrorMessage, {\n    error: errors[name],\n    visible: touched[name],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default FormImagePicker;","map":{"version":3,"sources":["/Users/elwx/Documents/GitHub/SmileTrade/Components/FormImagePicker.js"],"names":["React","useFormikContext","ErrorMessage","ImageInputList","FormImagePicker","name","errors","setFieldValue","touched","values","imageUris","useState","uploading","setUploading","handleAdd","uri","handleRemove","filter","imageUri"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,QAAiC,QAAjC;AAEA,OAAOC,YAAP;AACA,OAAOC,cAAP;;AAEA,SAASC,eAAT,OAAmC;AAAA,MAARC,IAAQ,QAARA,IAAQ;;AACjC,0BAAmDJ,gBAAgB,EAAnE;AAAA,MAAQK,MAAR,qBAAQA,MAAR;AAAA,MAAgBC,aAAhB,qBAAgBA,aAAhB;AAAA,MAA+BC,OAA/B,qBAA+BA,OAA/B;AAAA,MAAwCC,MAAxC,qBAAwCA,MAAxC;;AACA,MAAMC,SAAS,GAAGD,MAAM,CAACJ,IAAD,CAAxB;;AACA,kBAAkCM,QAAQ,CAAC,KAAD,CAA1C;AAAA;AAAA,MAAOC,SAAP;AAAA,MAAkBC,YAAlB;;AAEA,MAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,GAAD,EAAS;AACzBR,IAAAA,aAAa,CAACF,IAAD,+BAAWK,SAAX,IAAsBK,GAAtB,GAAb;AACD,GAFD;;AAIA,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAACD,GAAD,EAAS;AAC5BR,IAAAA,aAAa,CACXF,IADW,EAEXK,SAAS,CAACO,MAAV,CAAiB,UAACC,QAAD;AAAA,aAAcA,QAAQ,KAAKH,GAA3B;AAAA,KAAjB,CAFW,CAAb;AAID,GALD;;AASA,SACE,0CACE,oBAAC,cAAD;AACE,IAAA,SAAS,EAAEL,SADb;AAEE,IAAA,UAAU,EAAEI,SAFd;AAGE,IAAA,aAAa,EAAEE,YAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAME,oBAAC,YAAD;AAAc,IAAA,KAAK,EAAEV,MAAM,CAACD,IAAD,CAA3B;AAAmC,IAAA,OAAO,EAAEG,OAAO,CAACH,IAAD,CAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CADF;AAUD;;AAED,eAAeD,eAAf","sourcesContent":["import React from \"react\";\nimport { useFormikContext } from \"formik\";\n\nimport ErrorMessage from \"./ErrorMessage\";\nimport ImageInputList from \"./ImageInputList\";\n\nfunction FormImagePicker({ name }) {\n  const { errors, setFieldValue, touched, values } = useFormikContext();\n  const imageUris = values[name];\n  const [uploading, setUploading] = useState(false);\n\n  const handleAdd = (uri) => {\n    setFieldValue(name, [...imageUris, uri]);\n  };\n\n  const handleRemove = (uri) => {\n    setFieldValue(\n      name,\n      imageUris.filter((imageUri) => imageUri !== uri)\n    );\n  };\n\n\n\n  return (\n    <>\n      <ImageInputList\n        imageUris={imageUris}\n        onAddImage={handleAdd}\n        onRemoveImage={handleRemove}\n      />\n      <ErrorMessage error={errors[name]} visible={touched[name]} />\n    </>\n  );\n}\n\nexport default FormImagePicker;"]},"metadata":{},"sourceType":"module"}